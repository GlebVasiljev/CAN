
IRBE_CAN_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cd8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002e60  08002e60  00003e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e70  08002e70  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002e70  08002e70  00003e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e78  08002e78  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e78  08002e78  00003e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e7c  08002e7c  00003e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e80  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          000000b4  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c0  200000c0  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000070bd  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001702  00000000  00000000  0000b0f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000728  00000000  00000000  0000c800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000054b  00000000  00000000  0000cf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fa48  00000000  00000000  0000d473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000813f  00000000  00000000  0002cebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf312  00000000  00000000  00034ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f430c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001bcc  00000000  00000000  000f4350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  000f5f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e48 	.word	0x08002e48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002e48 	.word	0x08002e48

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 80004fa:	2300      	movs	r3, #0
 80004fc:	723b      	strb	r3, [r7, #8]
  RXM0reg.RXM0SIDL = 0x00;
 80004fe:	2300      	movs	r3, #0
 8000500:	727b      	strb	r3, [r7, #9]
  RXM0reg.RXM0EID8 = 0x00;
 8000502:	2300      	movs	r3, #0
 8000504:	72bb      	strb	r3, [r7, #10]
  RXM0reg.RXM0EID0 = 0x00;
 8000506:	2300      	movs	r3, #0
 8000508:	72fb      	strb	r3, [r7, #11]

  RXM1reg.RXM1SIDH = 0x00;
 800050a:	2300      	movs	r3, #0
 800050c:	713b      	strb	r3, [r7, #4]
  RXM1reg.RXM1SIDL = 0x00;
 800050e:	2300      	movs	r3, #0
 8000510:	717b      	strb	r3, [r7, #5]
  RXM1reg.RXM1EID8 = 0x00;
 8000512:	2300      	movs	r3, #0
 8000514:	71bb      	strb	r3, [r7, #6]
  RXM1reg.RXM1EID0 = 0x00;
 8000516:	2300      	movs	r3, #0
 8000518:	71fb      	strb	r3, [r7, #7]

  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;
 800051a:	2300      	movs	r3, #0
 800051c:	f887 3020 	strb.w	r3, [r7, #32]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000520:	2300      	movs	r3, #0
 8000522:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  RXF0reg.RXF0EID8 = 0x00;
 8000526:	2300      	movs	r3, #0
 8000528:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  RXF0reg.RXF0EID0 = 0x00;
 800052c:	2300      	movs	r3, #0
 800052e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  RXF1reg.RXF1SIDH = 0x00;
 8000532:	2300      	movs	r3, #0
 8000534:	773b      	strb	r3, [r7, #28]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000536:	2308      	movs	r3, #8
 8000538:	777b      	strb	r3, [r7, #29]
  RXF1reg.RXF1EID8 = 0x00;
 800053a:	2300      	movs	r3, #0
 800053c:	77bb      	strb	r3, [r7, #30]
  RXF1reg.RXF1EID0 = 0x00;
 800053e:	2300      	movs	r3, #0
 8000540:	77fb      	strb	r3, [r7, #31]

  RXF2reg.RXF2SIDH = 0x00;
 8000542:	2300      	movs	r3, #0
 8000544:	763b      	strb	r3, [r7, #24]
  RXF2reg.RXF2SIDL = 0x00;
 8000546:	2300      	movs	r3, #0
 8000548:	767b      	strb	r3, [r7, #25]
  RXF2reg.RXF2EID8 = 0x00;
 800054a:	2300      	movs	r3, #0
 800054c:	76bb      	strb	r3, [r7, #26]
  RXF2reg.RXF2EID0 = 0x00;
 800054e:	2300      	movs	r3, #0
 8000550:	76fb      	strb	r3, [r7, #27]

  RXF3reg.RXF3SIDH = 0x00;
 8000552:	2300      	movs	r3, #0
 8000554:	753b      	strb	r3, [r7, #20]
  RXF3reg.RXF3SIDL = 0x00;
 8000556:	2300      	movs	r3, #0
 8000558:	757b      	strb	r3, [r7, #21]
  RXF3reg.RXF3EID8 = 0x00;
 800055a:	2300      	movs	r3, #0
 800055c:	75bb      	strb	r3, [r7, #22]
  RXF3reg.RXF3EID0 = 0x00;
 800055e:	2300      	movs	r3, #0
 8000560:	75fb      	strb	r3, [r7, #23]

  RXF4reg.RXF4SIDH = 0x00;
 8000562:	2300      	movs	r3, #0
 8000564:	743b      	strb	r3, [r7, #16]
  RXF4reg.RXF4SIDL = 0x00;
 8000566:	2300      	movs	r3, #0
 8000568:	747b      	strb	r3, [r7, #17]
  RXF4reg.RXF4EID8 = 0x00;
 800056a:	2300      	movs	r3, #0
 800056c:	74bb      	strb	r3, [r7, #18]
  RXF4reg.RXF4EID0 = 0x00;
 800056e:	2300      	movs	r3, #0
 8000570:	74fb      	strb	r3, [r7, #19]

  RXF5reg.RXF5SIDH = 0x00;
 8000572:	2300      	movs	r3, #0
 8000574:	733b      	strb	r3, [r7, #12]
  RXF5reg.RXF5SIDL = 0x08;
 8000576:	2308      	movs	r3, #8
 8000578:	737b      	strb	r3, [r7, #13]
  RXF5reg.RXF5EID8 = 0x00;
 800057a:	2300      	movs	r3, #0
 800057c:	73bb      	strb	r3, [r7, #14]
  RXF5reg.RXF5EID0 = 0x00;
 800057e:	2300      	movs	r3, #0
 8000580:	73fb      	strb	r3, [r7, #15]

  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 8000582:	f000 fa1d 	bl	80009c0 <MCP2515_Initialize>
 8000586:	4603      	mov	r3, r0
 8000588:	f083 0301 	eor.w	r3, r3, #1
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <CANSPI_Initialize+0xa2>
  {
    return false;
 8000592:	2300      	movs	r3, #0
 8000594:	e06b      	b.n	800066e <CANSPI_Initialize+0x17a>
  }

  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 8000596:	f000 fa35 	bl	8000a04 <MCP2515_SetConfigMode>
 800059a:	4603      	mov	r3, r0
 800059c:	f083 0301 	eor.w	r3, r3, #1
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <CANSPI_Initialize+0xb6>
  {
    return false;
 80005a6:	2300      	movs	r3, #0
 80005a8:	e061      	b.n	800066e <CANSPI_Initialize+0x17a>
  }

  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80005aa:	f107 0308 	add.w	r3, r7, #8
 80005ae:	461a      	mov	r2, r3
 80005b0:	2123      	movs	r1, #35	@ 0x23
 80005b2:	2020      	movs	r0, #32
 80005b4:	f000 faca 	bl	8000b4c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	461a      	mov	r2, r3
 80005bc:	2127      	movs	r1, #39	@ 0x27
 80005be:	2024      	movs	r0, #36	@ 0x24
 80005c0:	f000 fac4 	bl	8000b4c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	461a      	mov	r2, r3
 80005ca:	2103      	movs	r1, #3
 80005cc:	2000      	movs	r0, #0
 80005ce:	f000 fabd 	bl	8000b4c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	461a      	mov	r2, r3
 80005d8:	2107      	movs	r1, #7
 80005da:	2004      	movs	r0, #4
 80005dc:	f000 fab6 	bl	8000b4c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80005e0:	f107 0318 	add.w	r3, r7, #24
 80005e4:	461a      	mov	r2, r3
 80005e6:	210b      	movs	r1, #11
 80005e8:	2008      	movs	r0, #8
 80005ea:	f000 faaf 	bl	8000b4c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	461a      	mov	r2, r3
 80005f4:	2113      	movs	r1, #19
 80005f6:	2010      	movs	r0, #16
 80005f8:	f000 faa8 	bl	8000b4c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80005fc:	f107 0310 	add.w	r3, r7, #16
 8000600:	461a      	mov	r2, r3
 8000602:	2117      	movs	r1, #23
 8000604:	2014      	movs	r0, #20
 8000606:	f000 faa1 	bl	8000b4c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	461a      	mov	r2, r3
 8000610:	211b      	movs	r1, #27
 8000612:	2018      	movs	r0, #24
 8000614:	f000 fa9a 	bl	8000b4c <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000618:	2104      	movs	r1, #4
 800061a:	2060      	movs	r0, #96	@ 0x60
 800061c:	f000 fa72 	bl	8000b04 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000620:	2101      	movs	r1, #1
 8000622:	2070      	movs	r0, #112	@ 0x70
 8000624:	f000 fa6e 	bl	8000b04 <MCP2515_WriteByte>


  /* CNF 1-3 Configuration */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000628:	2100      	movs	r1, #0
 800062a:	202a      	movs	r0, #42	@ 0x2a
 800062c:	f000 fa6a 	bl	8000b04 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000630:	21e5      	movs	r1, #229	@ 0xe5
 8000632:	2029      	movs	r0, #41	@ 0x29
 8000634:	f000 fa66 	bl	8000b04 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000638:	2183      	movs	r1, #131	@ 0x83
 800063a:	2028      	movs	r0, #40	@ 0x28
 800063c:	f000 fa62 	bl	8000b04 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000640:	f000 f9fe 	bl	8000a40 <MCP2515_SetNormalMode>
 8000644:	4603      	mov	r3, r0
 8000646:	f083 0301 	eor.w	r3, r3, #1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d00d      	beq.n	800066c <CANSPI_Initialize+0x178>
  {
	  uint8_t canintf = MCP2515_ReadByte(0x2C);
 8000650:	202c      	movs	r0, #44	@ 0x2c
 8000652:	f000 fa13 	bl	8000a7c <MCP2515_ReadByte>
 8000656:	4603      	mov	r3, r0
 8000658:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  uint8_t eflg    = MCP2515_ReadByte(0x2D);
 800065c:	202d      	movs	r0, #45	@ 0x2d
 800065e:	f000 fa0d 	bl	8000a7c <MCP2515_ReadByte>
 8000662:	4603      	mov	r3, r0
 8000664:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    return false;
 8000668:	2300      	movs	r3, #0
 800066a:	e000      	b.n	800066e <CANSPI_Initialize+0x17a>
  }
  return true;
 800066c:	2301      	movs	r3, #1
}
 800066e:	4618      	mov	r0, r3
 8000670:	3728      	adds	r7, #40	@ 0x28
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 8000684:	4b36      	ldr	r3, [pc, #216]	@ (8000760 <CANSPI_Transmit+0xe8>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 800068a:	4b35      	ldr	r3, [pc, #212]	@ (8000760 <CANSPI_Transmit+0xe8>)
 800068c:	2200      	movs	r2, #0
 800068e:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000690:	4b33      	ldr	r3, [pc, #204]	@ (8000760 <CANSPI_Transmit+0xe8>)
 8000692:	2200      	movs	r2, #0
 8000694:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000696:	4b32      	ldr	r3, [pc, #200]	@ (8000760 <CANSPI_Transmit+0xe8>)
 8000698:	2200      	movs	r2, #0
 800069a:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 800069c:	f000 fac4 	bl	8000c28 <MCP2515_ReadStatus>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000764 <CANSPI_Transmit+0xec>)
 80006a6:	701a      	strb	r2, [r3, #0]

  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 80006a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000764 <CANSPI_Transmit+0xec>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d115      	bne.n	80006e2 <CANSPI_Transmit+0x6a>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6858      	ldr	r0, [r3, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	4a28      	ldr	r2, [pc, #160]	@ (8000760 <CANSPI_Transmit+0xe8>)
 80006c0:	4619      	mov	r1, r3
 80006c2:	f000 f928 	bl	8000916 <convertCANid2Reg>

    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	7a1a      	ldrb	r2, [r3, #8]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	3309      	adds	r3, #9
 80006ce:	4924      	ldr	r1, [pc, #144]	@ (8000760 <CANSPI_Transmit+0xe8>)
 80006d0:	2040      	movs	r0, #64	@ 0x40
 80006d2:	f000 fa65 	bl	8000ba0 <MCP2515_LoadTxSequence>

    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 80006d6:	2081      	movs	r0, #129	@ 0x81
 80006d8:	f000 fa8c 	bl	8000bf4 <MCP2515_RequestToSend>

    returnValue = 1;
 80006dc:	2301      	movs	r3, #1
 80006de:	73fb      	strb	r3, [r7, #15]
 80006e0:	e038      	b.n	8000754 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80006e2:	4b20      	ldr	r3, [pc, #128]	@ (8000764 <CANSPI_Transmit+0xec>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	f003 0310 	and.w	r3, r3, #16
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d115      	bne.n	800071c <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6858      	ldr	r0, [r3, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	4a19      	ldr	r2, [pc, #100]	@ (8000760 <CANSPI_Transmit+0xe8>)
 80006fa:	4619      	mov	r1, r3
 80006fc:	f000 f90b 	bl	8000916 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	7a1a      	ldrb	r2, [r3, #8]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3309      	adds	r3, #9
 8000708:	4915      	ldr	r1, [pc, #84]	@ (8000760 <CANSPI_Transmit+0xe8>)
 800070a:	2042      	movs	r0, #66	@ 0x42
 800070c:	f000 fa48 	bl	8000ba0 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000710:	2082      	movs	r0, #130	@ 0x82
 8000712:	f000 fa6f 	bl	8000bf4 <MCP2515_RequestToSend>

    returnValue = 1;
 8000716:	2301      	movs	r3, #1
 8000718:	73fb      	strb	r3, [r7, #15]
 800071a:	e01b      	b.n	8000754 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 800071c:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <CANSPI_Transmit+0xec>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d114      	bne.n	8000754 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6858      	ldr	r0, [r3, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	4a0b      	ldr	r2, [pc, #44]	@ (8000760 <CANSPI_Transmit+0xe8>)
 8000734:	4619      	mov	r1, r3
 8000736:	f000 f8ee 	bl	8000916 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	7a1a      	ldrb	r2, [r3, #8]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	3309      	adds	r3, #9
 8000742:	4907      	ldr	r1, [pc, #28]	@ (8000760 <CANSPI_Transmit+0xe8>)
 8000744:	2044      	movs	r0, #68	@ 0x44
 8000746:	f000 fa2b 	bl	8000ba0 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800074a:	2084      	movs	r0, #132	@ 0x84
 800074c:	f000 fa52 	bl	8000bf4 <MCP2515_RequestToSend>

    returnValue = 1;
 8000750:	2301      	movs	r3, #1
 8000752:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 8000754:	7bfb      	ldrb	r3, [r7, #15]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000002c 	.word	0x2000002c
 8000764:	20000028 	.word	0x20000028

08000768 <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8000774:	f000 fa74 	bl	8000c60 <MCP2515_GetRxStatus>
 8000778:	4603      	mov	r3, r0
 800077a:	733b      	strb	r3, [r7, #12]

  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 800077c:	7b3b      	ldrb	r3, [r7, #12]
 800077e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2b00      	cmp	r3, #0
 8000786:	d066      	beq.n	8000856 <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000788:	7b3b      	ldrb	r3, [r7, #12]
 800078a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2b40      	cmp	r3, #64	@ 0x40
 8000792:	bf0c      	ite	eq
 8000794:	2301      	moveq	r3, #1
 8000796:	2300      	movne	r3, #0
 8000798:	b2da      	uxtb	r2, r3
 800079a:	7b3b      	ldrb	r3, [r7, #12]
 800079c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80007a4:	bf0c      	ite	eq
 80007a6:	2301      	moveq	r3, #1
 80007a8:	2300      	movne	r3, #0
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	4313      	orrs	r3, r2
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d007      	beq.n	80007c4 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	220d      	movs	r2, #13
 80007ba:	4619      	mov	r1, r3
 80007bc:	2090      	movs	r0, #144	@ 0x90
 80007be:	f000 f97f 	bl	8000ac0 <MCP2515_ReadRxSequence>
 80007c2:	e00c      	b.n	80007de <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80007c4:	7b3b      	ldrb	r3, [r7, #12]
 80007c6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b80      	cmp	r3, #128	@ 0x80
 80007ce:	d106      	bne.n	80007de <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	220d      	movs	r2, #13
 80007d6:	4619      	mov	r1, r3
 80007d8:	2094      	movs	r0, #148	@ 0x94
 80007da:	f000 f971 	bl	8000ac0 <MCP2515_ReadRxSequence>
    }

    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 80007de:	7b3b      	ldrb	r3, [r7, #12]
 80007e0:	f003 0318 	and.w	r3, r3, #24
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b10      	cmp	r3, #16
 80007e8:	d10c      	bne.n	8000804 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2202      	movs	r2, #2
 80007ee:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80007f0:	7cb8      	ldrb	r0, [r7, #18]
 80007f2:	7cf9      	ldrb	r1, [r7, #19]
 80007f4:	7c3a      	ldrb	r2, [r7, #16]
 80007f6:	7c7b      	ldrb	r3, [r7, #17]
 80007f8:	f000 f832 	bl	8000860 <convertReg2ExtendedCANid>
 80007fc:	4602      	mov	r2, r0
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	e00b      	b.n	800081c <CANSPI_Receive+0xb4>
    }
    else
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2201      	movs	r2, #1
 8000808:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800080a:	7c3b      	ldrb	r3, [r7, #16]
 800080c:	7c7a      	ldrb	r2, [r7, #17]
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f000 f863 	bl	80008dc <convertReg2StandardCANid>
 8000816:	4602      	mov	r2, r0
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	605a      	str	r2, [r3, #4]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 800081c:	7d3a      	ldrb	r2, [r7, #20]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8000822:	7d7a      	ldrb	r2, [r7, #21]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000828:	7dba      	ldrb	r2, [r7, #22]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800082e:	7dfa      	ldrb	r2, [r7, #23]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000834:	7e3a      	ldrb	r2, [r7, #24]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 800083a:	7e7a      	ldrb	r2, [r7, #25]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000840:	7eba      	ldrb	r2, [r7, #26]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8000846:	7efa      	ldrb	r2, [r7, #27]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 800084c:	7f3a      	ldrb	r2, [r7, #28]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	741a      	strb	r2, [r3, #16]

    returnValue = 1;
 8000852:	2301      	movs	r3, #1
 8000854:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 8000856:	7ffb      	ldrb	r3, [r7, #31]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8000860:	b490      	push	{r4, r7}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	4604      	mov	r4, r0
 8000868:	4608      	mov	r0, r1
 800086a:	4611      	mov	r1, r2
 800086c:	461a      	mov	r2, r3
 800086e:	4623      	mov	r3, r4
 8000870:	71fb      	strb	r3, [r7, #7]
 8000872:	4603      	mov	r3, r0
 8000874:	71bb      	strb	r3, [r7, #6]
 8000876:	460b      	mov	r3, r1
 8000878:	717b      	strb	r3, [r7, #5]
 800087a:	4613      	mov	r3, r2
 800087c:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8000886:	793b      	ldrb	r3, [r7, #4]
 8000888:	f003 0303 	and.w	r3, r3, #3
 800088c:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 800088e:	793b      	ldrb	r3, [r7, #4]
 8000890:	095b      	lsrs	r3, r3, #5
 8000892:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8000894:	797b      	ldrb	r3, [r7, #5]
 8000896:	00db      	lsls	r3, r3, #3
 8000898:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 800089a:	7bbb      	ldrb	r3, [r7, #14]
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	4413      	add	r3, r2
 80008a0:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	4413      	add	r3, r2
 80008ae:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	021b      	lsls	r3, r3, #8
 80008b4:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	4413      	add	r3, r2
 80008bc:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	4413      	add	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	617b      	str	r3, [r7, #20]
  return (returnValue);
 80008d0:	697b      	ldr	r3, [r7, #20]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc90      	pop	{r4, r7}
 80008da:	4770      	bx	lr

080008dc <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	460a      	mov	r2, r1
 80008e6:	71fb      	strb	r3, [r7, #7]
 80008e8:	4613      	mov	r3, r2
 80008ea:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	00db      	lsls	r3, r3, #3
 80008f4:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80008f6:	79bb      	ldrb	r3, [r7, #6]
 80008f8:	095b      	lsrs	r3, r3, #5
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	461a      	mov	r2, r3
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	4413      	add	r3, r2
 8000902:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 8000908:	68fb      	ldr	r3, [r7, #12]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <convertCANid2Reg>:

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 8000916:	b480      	push	{r7}
 8000918:	b087      	sub	sp, #28
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	460b      	mov	r3, r1
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000928:	7afb      	ldrb	r3, [r7, #11]
 800092a:	2b02      	cmp	r3, #2
 800092c:	d12e      	bne.n	800098c <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	b2da      	uxtb	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	0a1b      	lsrs	r3, r3, #8
 800093a:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	0a1b      	lsrs	r3, r3, #8
 8000948:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	f003 0303 	and.w	r3, r3, #3
 8000952:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f023 031f 	bic.w	r3, r3, #31
 8000962:	b2da      	uxtb	r2, r3
 8000964:	7dfb      	ldrb	r3, [r7, #23]
 8000966:	4413      	add	r3, r2
 8000968:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 800096a:	7dfb      	ldrb	r3, [r7, #23]
 800096c:	3308      	adds	r3, #8
 800096e:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000970:	7dfb      	ldrb	r3, [r7, #23]
 8000972:	f023 0314 	bic.w	r3, r3, #20
 8000976:	b2da      	uxtb	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	0a1b      	lsrs	r3, r3, #8
 8000980:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	b2da      	uxtb	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 800098a:	e013      	b.n	80009b4 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2200      	movs	r2, #0
 8000990:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2200      	movs	r2, #0
 8000996:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	015b      	lsls	r3, r3, #5
 800099c:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	701a      	strb	r2, [r3, #0]
}
 80009b4:	bf00      	nop
 80009b6:	371c      	adds	r7, #28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 80009c6:	2201      	movs	r2, #1
 80009c8:	2110      	movs	r1, #16
 80009ca:	480c      	ldr	r0, [pc, #48]	@ (80009fc <MCP2515_Initialize+0x3c>)
 80009cc:	f000 ffc0 	bl	8001950 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 80009d0:	230a      	movs	r3, #10
 80009d2:	71fb      	strb	r3, [r7, #7]

  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80009d4:	480a      	ldr	r0, [pc, #40]	@ (8000a00 <MCP2515_Initialize+0x40>)
 80009d6:	f002 f8ba 	bl	8002b4e <HAL_SPI_GetState>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d101      	bne.n	80009e4 <MCP2515_Initialize+0x24>
      return true;
 80009e0:	2301      	movs	r3, #1
 80009e2:	e006      	b.n	80009f2 <MCP2515_Initialize+0x32>

    loop--;
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d1f1      	bne.n	80009d4 <MCP2515_Initialize+0x14>

  return false;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40020000 	.word	0x40020000
 8000a00:	20000030 	.word	0x20000030

08000a04 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8000a0a:	2180      	movs	r1, #128	@ 0x80
 8000a0c:	200f      	movs	r0, #15
 8000a0e:	f000 f879 	bl	8000b04 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8000a12:	230a      	movs	r3, #10
 8000a14:	71fb      	strb	r3, [r7, #7]

  do {
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8000a16:	200e      	movs	r0, #14
 8000a18:	f000 f830 	bl	8000a7c <MCP2515_ReadByte>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000a22:	2b80      	cmp	r3, #128	@ 0x80
 8000a24:	d101      	bne.n	8000a2a <MCP2515_SetConfigMode+0x26>
      return true;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e006      	b.n	8000a38 <MCP2515_SetConfigMode+0x34>

    loop--;
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d1ef      	bne.n	8000a16 <MCP2515_SetConfigMode+0x12>

  return false;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8000a46:	2100      	movs	r1, #0
 8000a48:	200f      	movs	r0, #15
 8000a4a:	f000 f85b 	bl	8000b04 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8000a4e:	230a      	movs	r3, #10
 8000a50:	71fb      	strb	r3, [r7, #7]

  do {

    /* confirm mode configuration */

    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8000a52:	200e      	movs	r0, #14
 8000a54:	f000 f812 	bl	8000a7c <MCP2515_ReadByte>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d101      	bne.n	8000a66 <MCP2515_SetNormalMode+0x26>
      return true;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e006      	b.n	8000a74 <MCP2515_SetNormalMode+0x34>

    loop--;
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d1ef      	bne.n	8000a52 <MCP2515_SetNormalMode+0x12>

  return false;
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000a86:	2200      	movs	r2, #0
 8000a88:	2110      	movs	r1, #16
 8000a8a:	480c      	ldr	r0, [pc, #48]	@ (8000abc <MCP2515_ReadByte+0x40>)
 8000a8c:	f000 ff60 	bl	8001950 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 f901 	bl	8000c98 <SPI_Tx>
  SPI_Tx(address);
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 f8fd 	bl	8000c98 <SPI_Tx>
  retVal = SPI_Rx();
 8000a9e:	f000 f921 	bl	8000ce4 <SPI_Rx>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	4804      	ldr	r0, [pc, #16]	@ (8000abc <MCP2515_ReadByte+0x40>)
 8000aac:	f000 ff50 	bl	8001950 <HAL_GPIO_WritePin>

  return retVal;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40020000 	.word	0x40020000

08000ac0 <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	71fb      	strb	r3, [r7, #7]
 8000acc:	4613      	mov	r3, r2
 8000ace:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2110      	movs	r1, #16
 8000ad4:	480a      	ldr	r0, [pc, #40]	@ (8000b00 <MCP2515_ReadRxSequence+0x40>)
 8000ad6:	f000 ff3b 	bl	8001950 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f8db 	bl	8000c98 <SPI_Tx>
  SPI_RxBuffer(data, length);
 8000ae2:	79bb      	ldrb	r3, [r7, #6]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	6838      	ldr	r0, [r7, #0]
 8000ae8:	f000 f90c 	bl	8000d04 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 8000aec:	2201      	movs	r2, #1
 8000aee:	2110      	movs	r1, #16
 8000af0:	4803      	ldr	r0, [pc, #12]	@ (8000b00 <MCP2515_ReadRxSequence+0x40>)
 8000af2:	f000 ff2d 	bl	8001950 <HAL_GPIO_WritePin>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40020000 	.word	0x40020000

08000b04 <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	71fb      	strb	r3, [r7, #7]
 8000b10:	4613      	mov	r3, r2
 8000b12:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000b14:	2200      	movs	r2, #0
 8000b16:	2110      	movs	r1, #16
 8000b18:	480b      	ldr	r0, [pc, #44]	@ (8000b48 <MCP2515_WriteByte+0x44>)
 8000b1a:	f000 ff19 	bl	8001950 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000b1e:	2002      	movs	r0, #2
 8000b20:	f000 f8ba 	bl	8000c98 <SPI_Tx>
  SPI_Tx(address);
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f8b6 	bl	8000c98 <SPI_Tx>
  SPI_Tx(data);
 8000b2c:	79bb      	ldrb	r3, [r7, #6]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f8b2 	bl	8000c98 <SPI_Tx>

  MCP2515_CS_HIGH();
 8000b34:	2201      	movs	r2, #1
 8000b36:	2110      	movs	r1, #16
 8000b38:	4803      	ldr	r0, [pc, #12]	@ (8000b48 <MCP2515_WriteByte+0x44>)
 8000b3a:	f000 ff09 	bl	8001950 <HAL_GPIO_WritePin>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40020000 	.word	0x40020000

08000b4c <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	603a      	str	r2, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2110      	movs	r1, #16
 8000b60:	480e      	ldr	r0, [pc, #56]	@ (8000b9c <MCP2515_WriteByteSequence+0x50>)
 8000b62:	f000 fef5 	bl	8001950 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000b66:	2002      	movs	r0, #2
 8000b68:	f000 f896 	bl	8000c98 <SPI_Tx>
  SPI_Tx(startAddress);
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f892 	bl	8000c98 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8000b74:	79ba      	ldrb	r2, [r7, #6]
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	4619      	mov	r1, r3
 8000b82:	6838      	ldr	r0, [r7, #0]
 8000b84:	f000 f89a 	bl	8000cbc <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2110      	movs	r1, #16
 8000b8c:	4803      	ldr	r0, [pc, #12]	@ (8000b9c <MCP2515_WriteByteSequence+0x50>)
 8000b8e:	f000 fedf 	bl	8001950 <HAL_GPIO_WritePin>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	4603      	mov	r3, r0
 8000bac:	73fb      	strb	r3, [r7, #15]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2110      	movs	r1, #16
 8000bb6:	480e      	ldr	r0, [pc, #56]	@ (8000bf0 <MCP2515_LoadTxSequence+0x50>)
 8000bb8:	f000 feca 	bl	8001950 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 f86a 	bl	8000c98 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8000bc4:	2104      	movs	r1, #4
 8000bc6:	68b8      	ldr	r0, [r7, #8]
 8000bc8:	f000 f878 	bl	8000cbc <SPI_TxBuffer>
  SPI_Tx(dlc);
 8000bcc:	7bbb      	ldrb	r3, [r7, #14]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f862 	bl	8000c98 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8000bd4:	7bbb      	ldrb	r3, [r7, #14]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 f86f 	bl	8000cbc <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8000bde:	2201      	movs	r2, #1
 8000be0:	2110      	movs	r1, #16
 8000be2:	4803      	ldr	r0, [pc, #12]	@ (8000bf0 <MCP2515_LoadTxSequence+0x50>)
 8000be4:	f000 feb4 	bl	8001950 <HAL_GPIO_WritePin>
}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40020000 	.word	0x40020000

08000bf4 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2110      	movs	r1, #16
 8000c02:	4808      	ldr	r0, [pc, #32]	@ (8000c24 <MCP2515_RequestToSend+0x30>)
 8000c04:	f000 fea4 	bl	8001950 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f844 	bl	8000c98 <SPI_Tx>

  MCP2515_CS_HIGH();
 8000c10:	2201      	movs	r2, #1
 8000c12:	2110      	movs	r1, #16
 8000c14:	4803      	ldr	r0, [pc, #12]	@ (8000c24 <MCP2515_RequestToSend+0x30>)
 8000c16:	f000 fe9b 	bl	8001950 <HAL_GPIO_WritePin>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40020000 	.word	0x40020000

08000c28 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2110      	movs	r1, #16
 8000c32:	480a      	ldr	r0, [pc, #40]	@ (8000c5c <MCP2515_ReadStatus+0x34>)
 8000c34:	f000 fe8c 	bl	8001950 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 8000c38:	20a0      	movs	r0, #160	@ 0xa0
 8000c3a:	f000 f82d 	bl	8000c98 <SPI_Tx>
  retVal = SPI_Rx();
 8000c3e:	f000 f851 	bl	8000ce4 <SPI_Rx>
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8000c46:	2201      	movs	r2, #1
 8000c48:	2110      	movs	r1, #16
 8000c4a:	4804      	ldr	r0, [pc, #16]	@ (8000c5c <MCP2515_ReadStatus+0x34>)
 8000c4c:	f000 fe80 	bl	8001950 <HAL_GPIO_WritePin>

  return retVal;
 8000c50:	79fb      	ldrb	r3, [r7, #7]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40020000 	.word	0x40020000

08000c60 <MCP2515_GetRxStatus>:

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000c66:	2200      	movs	r2, #0
 8000c68:	2110      	movs	r1, #16
 8000c6a:	480a      	ldr	r0, [pc, #40]	@ (8000c94 <MCP2515_GetRxStatus+0x34>)
 8000c6c:	f000 fe70 	bl	8001950 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 8000c70:	20b0      	movs	r0, #176	@ 0xb0
 8000c72:	f000 f811 	bl	8000c98 <SPI_Tx>
  retVal = SPI_Rx();
 8000c76:	f000 f835 	bl	8000ce4 <SPI_Rx>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2110      	movs	r1, #16
 8000c82:	4804      	ldr	r0, [pc, #16]	@ (8000c94 <MCP2515_GetRxStatus+0x34>)
 8000c84:	f000 fe64 	bl	8001950 <HAL_GPIO_WritePin>

  return retVal;
 8000c88:	79fb      	ldrb	r3, [r7, #7]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40020000 	.word	0x40020000

08000c98 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8000ca2:	1df9      	adds	r1, r7, #7
 8000ca4:	230a      	movs	r3, #10
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	4803      	ldr	r0, [pc, #12]	@ (8000cb8 <SPI_Tx+0x20>)
 8000caa:	f001 fb4a 	bl	8002342 <HAL_SPI_Transmit>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000030 	.word	0x20000030

08000cbc <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	230a      	movs	r3, #10
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	4803      	ldr	r0, [pc, #12]	@ (8000ce0 <SPI_TxBuffer+0x24>)
 8000cd2:	f001 fb36 	bl	8002342 <HAL_SPI_Transmit>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000030 	.word	0x20000030

08000ce4 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000cea:	1df9      	adds	r1, r7, #7
 8000cec:	230a      	movs	r3, #10
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4803      	ldr	r0, [pc, #12]	@ (8000d00 <SPI_Rx+0x1c>)
 8000cf2:	f001 fc6a 	bl	80025ca <HAL_SPI_Receive>
  return retVal;
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000030 	.word	0x20000030

08000d04 <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000d10:	78fb      	ldrb	r3, [r7, #3]
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	230a      	movs	r3, #10
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	4803      	ldr	r0, [pc, #12]	@ (8000d28 <SPI_RxBuffer+0x24>)
 8000d1a:	f001 fc56 	bl	80025ca <HAL_SPI_Receive>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000030 	.word	0x20000030

08000d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d32:	f000 fac9 	bl	80012c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d36:	f000 f895 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3a:	f000 f927 	bl	8000f8c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d3e:	f000 f8ef 	bl	8000f20 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  CANSPI_Initialize();
 8000d42:	f7ff fbd7 	bl	80004f4 <CANSPI_Initialize>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(button_state == 1)
 8000d46:	4b41      	ldr	r3, [pc, #260]	@ (8000e4c <main+0x120>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d13e      	bne.n	8000dcc <main+0xa0>
	  {
		  txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8000d4e:	4b40      	ldr	r3, [pc, #256]	@ (8000e50 <main+0x124>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
		  txMessage.frame.id = 0x03; //  ID can be between Hex1 and Hex7FF (1-2047 decimal)
 8000d54:	4b3e      	ldr	r3, [pc, #248]	@ (8000e50 <main+0x124>)
 8000d56:	2203      	movs	r2, #3
 8000d58:	605a      	str	r2, [r3, #4]
		  txMessage.frame.dlc = 8;
 8000d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e50 <main+0x124>)
 8000d5c:	2208      	movs	r2, #8
 8000d5e:	721a      	strb	r2, [r3, #8]
		  txMessage.frame.data0 = sstr[0];
 8000d60:	4b3c      	ldr	r3, [pc, #240]	@ (8000e54 <main+0x128>)
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	4b3a      	ldr	r3, [pc, #232]	@ (8000e50 <main+0x124>)
 8000d66:	725a      	strb	r2, [r3, #9]
		  txMessage.frame.data1 = sstr[1];
 8000d68:	4b3a      	ldr	r3, [pc, #232]	@ (8000e54 <main+0x128>)
 8000d6a:	785a      	ldrb	r2, [r3, #1]
 8000d6c:	4b38      	ldr	r3, [pc, #224]	@ (8000e50 <main+0x124>)
 8000d6e:	729a      	strb	r2, [r3, #10]
		  txMessage.frame.data2 = sstr[2];
 8000d70:	4b38      	ldr	r3, [pc, #224]	@ (8000e54 <main+0x128>)
 8000d72:	789a      	ldrb	r2, [r3, #2]
 8000d74:	4b36      	ldr	r3, [pc, #216]	@ (8000e50 <main+0x124>)
 8000d76:	72da      	strb	r2, [r3, #11]
		  txMessage.frame.data3 = sstr[3];
 8000d78:	4b36      	ldr	r3, [pc, #216]	@ (8000e54 <main+0x128>)
 8000d7a:	78da      	ldrb	r2, [r3, #3]
 8000d7c:	4b34      	ldr	r3, [pc, #208]	@ (8000e50 <main+0x124>)
 8000d7e:	731a      	strb	r2, [r3, #12]
		  txMessage.frame.data4 = sstr[4];
 8000d80:	4b34      	ldr	r3, [pc, #208]	@ (8000e54 <main+0x128>)
 8000d82:	791a      	ldrb	r2, [r3, #4]
 8000d84:	4b32      	ldr	r3, [pc, #200]	@ (8000e50 <main+0x124>)
 8000d86:	735a      	strb	r2, [r3, #13]
		  txMessage.frame.data5 = sstr[5];
 8000d88:	4b32      	ldr	r3, [pc, #200]	@ (8000e54 <main+0x128>)
 8000d8a:	795a      	ldrb	r2, [r3, #5]
 8000d8c:	4b30      	ldr	r3, [pc, #192]	@ (8000e50 <main+0x124>)
 8000d8e:	739a      	strb	r2, [r3, #14]
		  txMessage.frame.data6 = sstr[6];
 8000d90:	4b30      	ldr	r3, [pc, #192]	@ (8000e54 <main+0x128>)
 8000d92:	799a      	ldrb	r2, [r3, #6]
 8000d94:	4b2e      	ldr	r3, [pc, #184]	@ (8000e50 <main+0x124>)
 8000d96:	73da      	strb	r2, [r3, #15]
		  txMessage.frame.data7 = sstr[7];
 8000d98:	4b2e      	ldr	r3, [pc, #184]	@ (8000e54 <main+0x128>)
 8000d9a:	79da      	ldrb	r2, [r3, #7]
 8000d9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e50 <main+0x124>)
 8000d9e:	741a      	strb	r2, [r3, #16]

		  CANSPI_Transmit(&txMessage);
 8000da0:	482b      	ldr	r0, [pc, #172]	@ (8000e50 <main+0x124>)
 8000da2:	f7ff fc69 	bl	8000678 <CANSPI_Transmit>

		  HAL_GPIO_WritePin(GPIOD ,LED_ORANGE_Pin, GPIO_PIN_SET);
 8000da6:	2201      	movs	r2, #1
 8000da8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dac:	482a      	ldr	r0, [pc, #168]	@ (8000e58 <main+0x12c>)
 8000dae:	f000 fdcf 	bl	8001950 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8000db2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000db6:	f000 faf9 	bl	80013ac <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD ,LED_ORANGE_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dc0:	4825      	ldr	r0, [pc, #148]	@ (8000e58 <main+0x12c>)
 8000dc2:	f000 fdc5 	bl	8001950 <HAL_GPIO_WritePin>
		  button_state = 0;
 8000dc6:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <main+0x120>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
	  }

	  if(rxMessageFlag == 1)
 8000dcc:	4b23      	ldr	r3, [pc, #140]	@ (8000e5c <main+0x130>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d1b8      	bne.n	8000d46 <main+0x1a>
	  {
		  if(CANSPI_Receive(&rxMessage))
 8000dd4:	4822      	ldr	r0, [pc, #136]	@ (8000e60 <main+0x134>)
 8000dd6:	f7ff fcc7 	bl	8000768 <CANSPI_Receive>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0b2      	beq.n	8000d46 <main+0x1a>
		  {
			  for(int i = 0; i < 4; i++)
 8000de0:	2300      	movs	r3, #0
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	e00a      	b.n	8000dfc <main+0xd0>
			  {
				  HAL_GPIO_TogglePin(GPIOD ,LED_GREEN_Pin);
 8000de6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dea:	481b      	ldr	r0, [pc, #108]	@ (8000e58 <main+0x12c>)
 8000dec:	f000 fdc9 	bl	8001982 <HAL_GPIO_TogglePin>
				  HAL_Delay(250);
 8000df0:	20fa      	movs	r0, #250	@ 0xfa
 8000df2:	f000 fadb 	bl	80013ac <HAL_Delay>
			  for(int i = 0; i < 4; i++)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	ddf1      	ble.n	8000de6 <main+0xba>
			  }

			  sstr[0] = rxMessage.frame.data0;
 8000e02:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <main+0x134>)
 8000e04:	7a5a      	ldrb	r2, [r3, #9]
 8000e06:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <main+0x128>)
 8000e08:	701a      	strb	r2, [r3, #0]
			  sstr[1] = rxMessage.frame.data1;
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <main+0x134>)
 8000e0c:	7a9a      	ldrb	r2, [r3, #10]
 8000e0e:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <main+0x128>)
 8000e10:	705a      	strb	r2, [r3, #1]
			  sstr[2] = rxMessage.frame.data2;
 8000e12:	4b13      	ldr	r3, [pc, #76]	@ (8000e60 <main+0x134>)
 8000e14:	7ada      	ldrb	r2, [r3, #11]
 8000e16:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <main+0x128>)
 8000e18:	709a      	strb	r2, [r3, #2]
			  sstr[3] = rxMessage.frame.data3;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <main+0x134>)
 8000e1c:	7b1a      	ldrb	r2, [r3, #12]
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <main+0x128>)
 8000e20:	70da      	strb	r2, [r3, #3]
			  sstr[4] = rxMessage.frame.data4;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <main+0x134>)
 8000e24:	7b5a      	ldrb	r2, [r3, #13]
 8000e26:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <main+0x128>)
 8000e28:	711a      	strb	r2, [r3, #4]
			  sstr[5] = rxMessage.frame.data5;
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <main+0x134>)
 8000e2c:	7b9a      	ldrb	r2, [r3, #14]
 8000e2e:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <main+0x128>)
 8000e30:	715a      	strb	r2, [r3, #5]
			  sstr[6] = rxMessage.frame.data6;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <main+0x134>)
 8000e34:	7bda      	ldrb	r2, [r3, #15]
 8000e36:	4b07      	ldr	r3, [pc, #28]	@ (8000e54 <main+0x128>)
 8000e38:	719a      	strb	r2, [r3, #6]
			  sstr[7] = rxMessage.frame.data7;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <main+0x134>)
 8000e3c:	7c1a      	ldrb	r2, [r3, #16]
 8000e3e:	4b05      	ldr	r3, [pc, #20]	@ (8000e54 <main+0x128>)
 8000e40:	71da      	strb	r2, [r3, #7]

			  rxMessageFlag = 0;
 8000e42:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <main+0x130>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
	  if(button_state == 1)
 8000e48:	e77d      	b.n	8000d46 <main+0x1a>
 8000e4a:	bf00      	nop
 8000e4c:	20000088 	.word	0x20000088
 8000e50:	2000008c 	.word	0x2000008c
 8000e54:	200000b4 	.word	0x200000b4
 8000e58:	40020c00 	.word	0x40020c00
 8000e5c:	20000089 	.word	0x20000089
 8000e60:	200000a0 	.word	0x200000a0

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b094      	sub	sp, #80	@ 0x50
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0320 	add.w	r3, r7, #32
 8000e6e:	2230      	movs	r2, #48	@ 0x30
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f001 ffbc 	bl	8002df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	4b22      	ldr	r3, [pc, #136]	@ (8000f18 <SystemClock_Config+0xb4>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e90:	4a21      	ldr	r2, [pc, #132]	@ (8000f18 <SystemClock_Config+0xb4>)
 8000e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e98:	4b1f      	ldr	r3, [pc, #124]	@ (8000f18 <SystemClock_Config+0xb4>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <SystemClock_Config+0xb8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a1b      	ldr	r2, [pc, #108]	@ (8000f1c <SystemClock_Config+0xb8>)
 8000eae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <SystemClock_Config+0xb8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec8:	2310      	movs	r3, #16
 8000eca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed0:	f107 0320 	add.w	r3, r7, #32
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 fd87 	bl	80019e8 <HAL_RCC_OscConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ee0:	f000 f902 	bl	80010e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 ffea 	bl	8001ed8 <HAL_RCC_ClockConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f0a:	f000 f8ed 	bl	80010e8 <Error_Handler>
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3750      	adds	r7, #80	@ 0x50
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40007000 	.word	0x40007000

08000f20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f24:	4b17      	ldr	r3, [pc, #92]	@ (8000f84 <MX_SPI1_Init+0x64>)
 8000f26:	4a18      	ldr	r2, [pc, #96]	@ (8000f88 <MX_SPI1_Init+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f2a:	4b16      	ldr	r3, [pc, #88]	@ (8000f84 <MX_SPI1_Init+0x64>)
 8000f2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f32:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <MX_SPI1_Init+0x64>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f38:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <MX_SPI1_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f3e:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <MX_SPI1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <MX_SPI1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <MX_SPI1_Init+0x64>)
 8000f4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f52:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <MX_SPI1_Init+0x64>)
 8000f54:	2218      	movs	r2, #24
 8000f56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <MX_SPI1_Init+0x64>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f5e:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <MX_SPI1_Init+0x64>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f64:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <MX_SPI1_Init+0x64>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <MX_SPI1_Init+0x64>)
 8000f6c:	220a      	movs	r2, #10
 8000f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f70:	4804      	ldr	r0, [pc, #16]	@ (8000f84 <MX_SPI1_Init+0x64>)
 8000f72:	f001 f95d 	bl	8002230 <HAL_SPI_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f7c:	f000 f8b4 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000030 	.word	0x20000030
 8000f88:	40013000 	.word	0x40013000

08000f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 030c 	add.w	r3, r7, #12
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	4b3f      	ldr	r3, [pc, #252]	@ (80010a4 <MX_GPIO_Init+0x118>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a3e      	ldr	r2, [pc, #248]	@ (80010a4 <MX_GPIO_Init+0x118>)
 8000fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b3c      	ldr	r3, [pc, #240]	@ (80010a4 <MX_GPIO_Init+0x118>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b38      	ldr	r3, [pc, #224]	@ (80010a4 <MX_GPIO_Init+0x118>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	4a37      	ldr	r2, [pc, #220]	@ (80010a4 <MX_GPIO_Init+0x118>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fce:	4b35      	ldr	r3, [pc, #212]	@ (80010a4 <MX_GPIO_Init+0x118>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	4b31      	ldr	r3, [pc, #196]	@ (80010a4 <MX_GPIO_Init+0x118>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a30      	ldr	r2, [pc, #192]	@ (80010a4 <MX_GPIO_Init+0x118>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b2e      	ldr	r3, [pc, #184]	@ (80010a4 <MX_GPIO_Init+0x118>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	482b      	ldr	r0, [pc, #172]	@ (80010a8 <MX_GPIO_Init+0x11c>)
 8000ffc:	f000 fca8 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001006:	4829      	ldr	r0, [pc, #164]	@ (80010ac <MX_GPIO_Init+0x120>)
 8001008:	f000 fca2 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800100c:	2301      	movs	r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001010:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001014:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001016:	2301      	movs	r3, #1
 8001018:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	4619      	mov	r1, r3
 8001020:	4821      	ldr	r0, [pc, #132]	@ (80010a8 <MX_GPIO_Init+0x11c>)
 8001022:	f000 faf9 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_INT_Pin */
  GPIO_InitStruct.Pin = CAN_INT_Pin;
 8001026:	2308      	movs	r3, #8
 8001028:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800102a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800102e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	4619      	mov	r1, r3
 800103a:	481b      	ldr	r0, [pc, #108]	@ (80010a8 <MX_GPIO_Init+0x11c>)
 800103c:	f000 faec 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001040:	2310      	movs	r3, #16
 8001042:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	4619      	mov	r1, r3
 8001056:	4814      	ldr	r0, [pc, #80]	@ (80010a8 <MX_GPIO_Init+0x11c>)
 8001058:	f000 fade 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin;
 800105c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001060:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	4619      	mov	r1, r3
 8001074:	480d      	ldr	r0, [pc, #52]	@ (80010ac <MX_GPIO_Init+0x120>)
 8001076:	f000 facf 	bl	8001618 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2102      	movs	r1, #2
 800107e:	2006      	movs	r0, #6
 8001080:	f000 fa93 	bl	80015aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001084:	2006      	movs	r0, #6
 8001086:	f000 faac 	bl	80015e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2103      	movs	r1, #3
 800108e:	2009      	movs	r0, #9
 8001090:	f000 fa8b 	bl	80015aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001094:	2009      	movs	r0, #9
 8001096:	f000 faa4 	bl	80015e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800109a:	bf00      	nop
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020c00 	.word	0x40020c00

080010b0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d102      	bne.n	80010c6 <HAL_GPIO_EXTI_Callback+0x16>
    {
    	button_state = 1;
 80010c0:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <HAL_GPIO_EXTI_Callback+0x30>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]

    }
    if (GPIO_Pin == CAN_INT_Pin)
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d102      	bne.n	80010d2 <HAL_GPIO_EXTI_Callback+0x22>
    {
    	rxMessageFlag = 1;
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <HAL_GPIO_EXTI_Callback+0x34>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]

    }

}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000088 	.word	0x20000088
 80010e4:	20000089 	.word	0x20000089

080010e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ec:	b672      	cpsid	i
}
 80010ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <Error_Handler+0x8>

080010f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <HAL_MspInit+0x4c>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001102:	4a0f      	ldr	r2, [pc, #60]	@ (8001140 <HAL_MspInit+0x4c>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001108:	6453      	str	r3, [r2, #68]	@ 0x44
 800110a:	4b0d      	ldr	r3, [pc, #52]	@ (8001140 <HAL_MspInit+0x4c>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <HAL_MspInit+0x4c>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	4a08      	ldr	r2, [pc, #32]	@ (8001140 <HAL_MspInit+0x4c>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001124:	6413      	str	r3, [r2, #64]	@ 0x40
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <HAL_MspInit+0x4c>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800

08001144 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	@ 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a19      	ldr	r2, [pc, #100]	@ (80011c8 <HAL_SPI_MspInit+0x84>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d12b      	bne.n	80011be <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <HAL_SPI_MspInit+0x88>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116e:	4a17      	ldr	r2, [pc, #92]	@ (80011cc <HAL_SPI_MspInit+0x88>)
 8001170:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001174:	6453      	str	r3, [r2, #68]	@ 0x44
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <HAL_SPI_MspInit+0x88>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <HAL_SPI_MspInit+0x88>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a10      	ldr	r2, [pc, #64]	@ (80011cc <HAL_SPI_MspInit+0x88>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <HAL_SPI_MspInit+0x88>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800119e:	23e0      	movs	r3, #224	@ 0xe0
 80011a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ae:	2305      	movs	r3, #5
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <HAL_SPI_MspInit+0x8c>)
 80011ba:	f000 fa2d 	bl	8001618 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	@ 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40013000 	.word	0x40013000
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000

080011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <NMI_Handler+0x4>

080011dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <HardFault_Handler+0x4>

080011e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <MemManage_Handler+0x4>

080011ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <BusFault_Handler+0x4>

080011f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <UsageFault_Handler+0x4>

080011fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122a:	f000 f89f 	bl	800136c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}

08001232 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001236:	2001      	movs	r0, #1
 8001238:	f000 fbbe 	bl	80019b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}

08001240 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN_INT_Pin);
 8001244:	2008      	movs	r0, #8
 8001246:	f000 fbb7 	bl	80019b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001254:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <SystemInit+0x20>)
 8001256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800125a:	4a05      	ldr	r2, [pc, #20]	@ (8001270 <SystemInit+0x20>)
 800125c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001260:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001274:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001278:	f7ff ffea 	bl	8001250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800127c:	480c      	ldr	r0, [pc, #48]	@ (80012b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800127e:	490d      	ldr	r1, [pc, #52]	@ (80012b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001280:	4a0d      	ldr	r2, [pc, #52]	@ (80012b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001284:	e002      	b.n	800128c <LoopCopyDataInit>

08001286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128a:	3304      	adds	r3, #4

0800128c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800128c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001290:	d3f9      	bcc.n	8001286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001292:	4a0a      	ldr	r2, [pc, #40]	@ (80012bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001294:	4c0a      	ldr	r4, [pc, #40]	@ (80012c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001298:	e001      	b.n	800129e <LoopFillZerobss>

0800129a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800129c:	3204      	adds	r2, #4

0800129e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a0:	d3fb      	bcc.n	800129a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012a2:	f001 fdad 	bl	8002e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012a6:	f7ff fd41 	bl	8000d2c <main>
  bx  lr    
 80012aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012b8:	08002e80 	.word	0x08002e80
  ldr r2, =_sbss
 80012bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012c0:	200000c0 	.word	0x200000c0

080012c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC_IRQHandler>
	...

080012c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <HAL_Init+0x40>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001308 <HAL_Init+0x40>)
 80012d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <HAL_Init+0x40>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001308 <HAL_Init+0x40>)
 80012de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e4:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <HAL_Init+0x40>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a07      	ldr	r2, [pc, #28]	@ (8001308 <HAL_Init+0x40>)
 80012ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f000 f94f 	bl	8001594 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f6:	200f      	movs	r0, #15
 80012f8:	f000 f808 	bl	800130c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012fc:	f7ff fefa 	bl	80010f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023c00 	.word	0x40023c00

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <HAL_InitTick+0x54>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <HAL_InitTick+0x58>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4619      	mov	r1, r3
 800131e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001322:	fbb3 f3f1 	udiv	r3, r3, r1
 8001326:	fbb2 f3f3 	udiv	r3, r2, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f967 	bl	80015fe <HAL_SYSTICK_Config>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e00e      	b.n	8001358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d80a      	bhi.n	8001356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001340:	2200      	movs	r2, #0
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f000 f92f 	bl	80015aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800134c:	4a06      	ldr	r2, [pc, #24]	@ (8001368 <HAL_InitTick+0x5c>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000000 	.word	0x20000000
 8001364:	20000008 	.word	0x20000008
 8001368:	20000004 	.word	0x20000004

0800136c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001370:	4b06      	ldr	r3, [pc, #24]	@ (800138c <HAL_IncTick+0x20>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_IncTick+0x24>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a04      	ldr	r2, [pc, #16]	@ (8001390 <HAL_IncTick+0x24>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000008 	.word	0x20000008
 8001390:	200000bc 	.word	0x200000bc

08001394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b03      	ldr	r3, [pc, #12]	@ (80013a8 <HAL_GetTick+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	200000bc 	.word	0x200000bc

080013ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff ffee 	bl	8001394 <HAL_GetTick>
 80013b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c4:	d005      	beq.n	80013d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c6:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <HAL_Delay+0x44>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013d2:	bf00      	nop
 80013d4:	f7ff ffde 	bl	8001394 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d8f7      	bhi.n	80013d4 <HAL_Delay+0x28>
  {
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000008 	.word	0x20000008

080013f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800141c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	@ (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	db0b      	blt.n	8001482 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	f003 021f 	and.w	r2, r3, #31
 8001470:	4907      	ldr	r1, [pc, #28]	@ (8001490 <__NVIC_EnableIRQ+0x38>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	2001      	movs	r0, #1
 800147a:	fa00 f202 	lsl.w	r2, r0, r2
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000e100 	.word	0xe000e100

08001494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	db0a      	blt.n	80014be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	490c      	ldr	r1, [pc, #48]	@ (80014e0 <__NVIC_SetPriority+0x4c>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	440b      	add	r3, r1
 80014b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014bc:	e00a      	b.n	80014d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4908      	ldr	r1, [pc, #32]	@ (80014e4 <__NVIC_SetPriority+0x50>)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	3b04      	subs	r3, #4
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	440b      	add	r3, r1
 80014d2:	761a      	strb	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000e100 	.word	0xe000e100
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	@ 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f1c3 0307 	rsb	r3, r3, #7
 8001502:	2b04      	cmp	r3, #4
 8001504:	bf28      	it	cs
 8001506:	2304      	movcs	r3, #4
 8001508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	2b06      	cmp	r3, #6
 8001510:	d902      	bls.n	8001518 <NVIC_EncodePriority+0x30>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3b03      	subs	r3, #3
 8001516:	e000      	b.n	800151a <NVIC_EncodePriority+0x32>
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43d9      	mvns	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	4313      	orrs	r3, r2
         );
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	@ 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001560:	d301      	bcc.n	8001566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001562:	2301      	movs	r3, #1
 8001564:	e00f      	b.n	8001586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001566:	4a0a      	ldr	r2, [pc, #40]	@ (8001590 <SysTick_Config+0x40>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156e:	210f      	movs	r1, #15
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f7ff ff8e 	bl	8001494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001578:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <SysTick_Config+0x40>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157e:	4b04      	ldr	r3, [pc, #16]	@ (8001590 <SysTick_Config+0x40>)
 8001580:	2207      	movs	r2, #7
 8001582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	e000e010 	.word	0xe000e010

08001594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff29 	bl	80013f4 <__NVIC_SetPriorityGrouping>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015bc:	f7ff ff3e 	bl	800143c <__NVIC_GetPriorityGrouping>
 80015c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	6978      	ldr	r0, [r7, #20]
 80015c8:	f7ff ff8e 	bl	80014e8 <NVIC_EncodePriority>
 80015cc:	4602      	mov	r2, r0
 80015ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff5d 	bl	8001494 <__NVIC_SetPriority>
}
 80015da:	bf00      	nop
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff31 	bl	8001458 <__NVIC_EnableIRQ>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ffa2 	bl	8001550 <SysTick_Config>
 800160c:	4603      	mov	r3, r0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	@ 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
 8001632:	e16b      	b.n	800190c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001634:	2201      	movs	r2, #1
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	429a      	cmp	r2, r3
 800164e:	f040 815a 	bne.w	8001906 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	2b01      	cmp	r3, #1
 800165c:	d005      	beq.n	800166a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001666:	2b02      	cmp	r3, #2
 8001668:	d130      	bne.n	80016cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	2203      	movs	r2, #3
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a0:	2201      	movs	r2, #1
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f003 0201 	and.w	r2, r3, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d017      	beq.n	8001708 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	2203      	movs	r2, #3
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d123      	bne.n	800175c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	08da      	lsrs	r2, r3, #3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3208      	adds	r2, #8
 800171c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	220f      	movs	r2, #15
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	08da      	lsrs	r2, r3, #3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3208      	adds	r2, #8
 8001756:	69b9      	ldr	r1, [r7, #24]
 8001758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0203 	and.w	r2, r3, #3
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 80b4 	beq.w	8001906 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b60      	ldr	r3, [pc, #384]	@ (8001924 <HAL_GPIO_Init+0x30c>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a6:	4a5f      	ldr	r2, [pc, #380]	@ (8001924 <HAL_GPIO_Init+0x30c>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001924 <HAL_GPIO_Init+0x30c>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001928 <HAL_GPIO_Init+0x310>)
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	3302      	adds	r3, #2
 80017c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a52      	ldr	r2, [pc, #328]	@ (800192c <HAL_GPIO_Init+0x314>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d02b      	beq.n	800183e <HAL_GPIO_Init+0x226>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a51      	ldr	r2, [pc, #324]	@ (8001930 <HAL_GPIO_Init+0x318>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d025      	beq.n	800183a <HAL_GPIO_Init+0x222>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a50      	ldr	r2, [pc, #320]	@ (8001934 <HAL_GPIO_Init+0x31c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d01f      	beq.n	8001836 <HAL_GPIO_Init+0x21e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001938 <HAL_GPIO_Init+0x320>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d019      	beq.n	8001832 <HAL_GPIO_Init+0x21a>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4e      	ldr	r2, [pc, #312]	@ (800193c <HAL_GPIO_Init+0x324>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d013      	beq.n	800182e <HAL_GPIO_Init+0x216>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4d      	ldr	r2, [pc, #308]	@ (8001940 <HAL_GPIO_Init+0x328>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d00d      	beq.n	800182a <HAL_GPIO_Init+0x212>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4c      	ldr	r2, [pc, #304]	@ (8001944 <HAL_GPIO_Init+0x32c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d007      	beq.n	8001826 <HAL_GPIO_Init+0x20e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4b      	ldr	r2, [pc, #300]	@ (8001948 <HAL_GPIO_Init+0x330>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d101      	bne.n	8001822 <HAL_GPIO_Init+0x20a>
 800181e:	2307      	movs	r3, #7
 8001820:	e00e      	b.n	8001840 <HAL_GPIO_Init+0x228>
 8001822:	2308      	movs	r3, #8
 8001824:	e00c      	b.n	8001840 <HAL_GPIO_Init+0x228>
 8001826:	2306      	movs	r3, #6
 8001828:	e00a      	b.n	8001840 <HAL_GPIO_Init+0x228>
 800182a:	2305      	movs	r3, #5
 800182c:	e008      	b.n	8001840 <HAL_GPIO_Init+0x228>
 800182e:	2304      	movs	r3, #4
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x228>
 8001832:	2303      	movs	r3, #3
 8001834:	e004      	b.n	8001840 <HAL_GPIO_Init+0x228>
 8001836:	2302      	movs	r3, #2
 8001838:	e002      	b.n	8001840 <HAL_GPIO_Init+0x228>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_GPIO_Init+0x228>
 800183e:	2300      	movs	r3, #0
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	f002 0203 	and.w	r2, r2, #3
 8001846:	0092      	lsls	r2, r2, #2
 8001848:	4093      	lsls	r3, r2
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001850:	4935      	ldr	r1, [pc, #212]	@ (8001928 <HAL_GPIO_Init+0x310>)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800185e:	4b3b      	ldr	r3, [pc, #236]	@ (800194c <HAL_GPIO_Init+0x334>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001882:	4a32      	ldr	r2, [pc, #200]	@ (800194c <HAL_GPIO_Init+0x334>)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001888:	4b30      	ldr	r3, [pc, #192]	@ (800194c <HAL_GPIO_Init+0x334>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018ac:	4a27      	ldr	r2, [pc, #156]	@ (800194c <HAL_GPIO_Init+0x334>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018b2:	4b26      	ldr	r3, [pc, #152]	@ (800194c <HAL_GPIO_Init+0x334>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018d6:	4a1d      	ldr	r2, [pc, #116]	@ (800194c <HAL_GPIO_Init+0x334>)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <HAL_GPIO_Init+0x334>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001900:	4a12      	ldr	r2, [pc, #72]	@ (800194c <HAL_GPIO_Init+0x334>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3301      	adds	r3, #1
 800190a:	61fb      	str	r3, [r7, #28]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	2b0f      	cmp	r3, #15
 8001910:	f67f ae90 	bls.w	8001634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3724      	adds	r7, #36	@ 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	40013800 	.word	0x40013800
 800192c:	40020000 	.word	0x40020000
 8001930:	40020400 	.word	0x40020400
 8001934:	40020800 	.word	0x40020800
 8001938:	40020c00 	.word	0x40020c00
 800193c:	40021000 	.word	0x40021000
 8001940:	40021400 	.word	0x40021400
 8001944:	40021800 	.word	0x40021800
 8001948:	40021c00 	.word	0x40021c00
 800194c:	40013c00 	.word	0x40013c00

08001950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800196c:	e003      	b.n	8001976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	041a      	lsls	r2, r3, #16
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	619a      	str	r2, [r3, #24]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001994:	887a      	ldrh	r2, [r7, #2]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4013      	ands	r3, r2
 800199a:	041a      	lsls	r2, r3, #16
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	43d9      	mvns	r1, r3
 80019a0:	887b      	ldrh	r3, [r7, #2]
 80019a2:	400b      	ands	r3, r1
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	619a      	str	r2, [r3, #24]
}
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019c2:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019c4:	695a      	ldr	r2, [r3, #20]
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d006      	beq.n	80019dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019ce:	4a05      	ldr	r2, [pc, #20]	@ (80019e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d0:	88fb      	ldrh	r3, [r7, #6]
 80019d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fb6a 	bl	80010b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40013c00 	.word	0x40013c00

080019e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e267      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d075      	beq.n	8001af2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a06:	4b88      	ldr	r3, [pc, #544]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d00c      	beq.n	8001a2c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a12:	4b85      	ldr	r3, [pc, #532]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d112      	bne.n	8001a44 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a1e:	4b82      	ldr	r3, [pc, #520]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a2a:	d10b      	bne.n	8001a44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2c:	4b7e      	ldr	r3, [pc, #504]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d05b      	beq.n	8001af0 <HAL_RCC_OscConfig+0x108>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d157      	bne.n	8001af0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e242      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a4c:	d106      	bne.n	8001a5c <HAL_RCC_OscConfig+0x74>
 8001a4e:	4b76      	ldr	r3, [pc, #472]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a75      	ldr	r2, [pc, #468]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e01d      	b.n	8001a98 <HAL_RCC_OscConfig+0xb0>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0x98>
 8001a66:	4b70      	ldr	r3, [pc, #448]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a6f      	ldr	r2, [pc, #444]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b6d      	ldr	r3, [pc, #436]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a6c      	ldr	r2, [pc, #432]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e00b      	b.n	8001a98 <HAL_RCC_OscConfig+0xb0>
 8001a80:	4b69      	ldr	r3, [pc, #420]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a68      	ldr	r2, [pc, #416]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b66      	ldr	r3, [pc, #408]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a65      	ldr	r2, [pc, #404]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d013      	beq.n	8001ac8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fc78 	bl	8001394 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fc74 	bl	8001394 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	@ 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e207      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aba:	4b5b      	ldr	r3, [pc, #364]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0xc0>
 8001ac6:	e014      	b.n	8001af2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fc64 	bl	8001394 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fc60 	bl	8001394 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	@ 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e1f3      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae2:	4b51      	ldr	r3, [pc, #324]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0xe8>
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d063      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001afe:	4b4a      	ldr	r3, [pc, #296]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00b      	beq.n	8001b22 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b0a:	4b47      	ldr	r3, [pc, #284]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d11c      	bne.n	8001b50 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b16:	4b44      	ldr	r3, [pc, #272]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d116      	bne.n	8001b50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b22:	4b41      	ldr	r3, [pc, #260]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d005      	beq.n	8001b3a <HAL_RCC_OscConfig+0x152>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d001      	beq.n	8001b3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e1c7      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4937      	ldr	r1, [pc, #220]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4e:	e03a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d020      	beq.n	8001b9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b58:	4b34      	ldr	r3, [pc, #208]	@ (8001c2c <HAL_RCC_OscConfig+0x244>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5e:	f7ff fc19 	bl	8001394 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b66:	f7ff fc15 	bl	8001394 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e1a8      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b78:	4b2b      	ldr	r3, [pc, #172]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b84:	4b28      	ldr	r3, [pc, #160]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4925      	ldr	r1, [pc, #148]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]
 8001b98:	e015      	b.n	8001bc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9a:	4b24      	ldr	r3, [pc, #144]	@ (8001c2c <HAL_RCC_OscConfig+0x244>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fbf8 	bl	8001394 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba8:	f7ff fbf4 	bl	8001394 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e187      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bba:	4b1b      	ldr	r3, [pc, #108]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d036      	beq.n	8001c40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d016      	beq.n	8001c08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bda:	4b15      	ldr	r3, [pc, #84]	@ (8001c30 <HAL_RCC_OscConfig+0x248>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be0:	f7ff fbd8 	bl	8001394 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be8:	f7ff fbd4 	bl	8001394 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e167      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x200>
 8001c06:	e01b      	b.n	8001c40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c08:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <HAL_RCC_OscConfig+0x248>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0e:	f7ff fbc1 	bl	8001394 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c14:	e00e      	b.n	8001c34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c16:	f7ff fbbd 	bl	8001394 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d907      	bls.n	8001c34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e150      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	42470000 	.word	0x42470000
 8001c30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c34:	4b88      	ldr	r3, [pc, #544]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001c36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1ea      	bne.n	8001c16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 8097 	beq.w	8001d7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c52:	4b81      	ldr	r3, [pc, #516]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10f      	bne.n	8001c7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	4b7d      	ldr	r3, [pc, #500]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	4a7c      	ldr	r2, [pc, #496]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c6e:	4b7a      	ldr	r3, [pc, #488]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7e:	4b77      	ldr	r3, [pc, #476]	@ (8001e5c <HAL_RCC_OscConfig+0x474>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d118      	bne.n	8001cbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c8a:	4b74      	ldr	r3, [pc, #464]	@ (8001e5c <HAL_RCC_OscConfig+0x474>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a73      	ldr	r2, [pc, #460]	@ (8001e5c <HAL_RCC_OscConfig+0x474>)
 8001c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c96:	f7ff fb7d 	bl	8001394 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9e:	f7ff fb79 	bl	8001394 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e10c      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb0:	4b6a      	ldr	r3, [pc, #424]	@ (8001e5c <HAL_RCC_OscConfig+0x474>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d106      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x2ea>
 8001cc4:	4b64      	ldr	r3, [pc, #400]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc8:	4a63      	ldr	r2, [pc, #396]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cd0:	e01c      	b.n	8001d0c <HAL_RCC_OscConfig+0x324>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b05      	cmp	r3, #5
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x30c>
 8001cda:	4b5f      	ldr	r3, [pc, #380]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cde:	4a5e      	ldr	r2, [pc, #376]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ce6:	4b5c      	ldr	r3, [pc, #368]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cea:	4a5b      	ldr	r2, [pc, #364]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCC_OscConfig+0x324>
 8001cf4:	4b58      	ldr	r3, [pc, #352]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf8:	4a57      	ldr	r2, [pc, #348]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001cfa:	f023 0301 	bic.w	r3, r3, #1
 8001cfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d00:	4b55      	ldr	r3, [pc, #340]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d04:	4a54      	ldr	r2, [pc, #336]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001d06:	f023 0304 	bic.w	r3, r3, #4
 8001d0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d015      	beq.n	8001d40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7ff fb3e 	bl	8001394 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1c:	f7ff fb3a 	bl	8001394 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e0cb      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d32:	4b49      	ldr	r3, [pc, #292]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0ee      	beq.n	8001d1c <HAL_RCC_OscConfig+0x334>
 8001d3e:	e014      	b.n	8001d6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d40:	f7ff fb28 	bl	8001394 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d46:	e00a      	b.n	8001d5e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d48:	f7ff fb24 	bl	8001394 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e0b5      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1ee      	bne.n	8001d48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d6a:	7dfb      	ldrb	r3, [r7, #23]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d105      	bne.n	8001d7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d70:	4b39      	ldr	r3, [pc, #228]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d74:	4a38      	ldr	r2, [pc, #224]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001d76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d7a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80a1 	beq.w	8001ec8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d86:	4b34      	ldr	r3, [pc, #208]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d05c      	beq.n	8001e4c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d141      	bne.n	8001e1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9a:	4b31      	ldr	r3, [pc, #196]	@ (8001e60 <HAL_RCC_OscConfig+0x478>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7ff faf8 	bl	8001394 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da8:	f7ff faf4 	bl	8001394 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e087      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dba:	4b27      	ldr	r3, [pc, #156]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69da      	ldr	r2, [r3, #28]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd4:	019b      	lsls	r3, r3, #6
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ddc:	085b      	lsrs	r3, r3, #1
 8001dde:	3b01      	subs	r3, #1
 8001de0:	041b      	lsls	r3, r3, #16
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de8:	061b      	lsls	r3, r3, #24
 8001dea:	491b      	ldr	r1, [pc, #108]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e60 <HAL_RCC_OscConfig+0x478>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df6:	f7ff facd 	bl	8001394 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfe:	f7ff fac9 	bl	8001394 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e05c      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e10:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCC_OscConfig+0x416>
 8001e1c:	e054      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1e:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <HAL_RCC_OscConfig+0x478>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7ff fab6 	bl	8001394 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7ff fab2 	bl	8001394 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e045      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3e:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x444>
 8001e4a:	e03d      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d107      	bne.n	8001e64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e038      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e64:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ec>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d028      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d121      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d11a      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e94:	4013      	ands	r3, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d111      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eaa:	085b      	lsrs	r3, r3, #1
 8001eac:	3b01      	subs	r3, #1
 8001eae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d107      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800

08001ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0cc      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eec:	4b68      	ldr	r3, [pc, #416]	@ (8002090 <HAL_RCC_ClockConfig+0x1b8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d90c      	bls.n	8001f14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b65      	ldr	r3, [pc, #404]	@ (8002090 <HAL_RCC_ClockConfig+0x1b8>)
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b63      	ldr	r3, [pc, #396]	@ (8002090 <HAL_RCC_ClockConfig+0x1b8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0b8      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d020      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f2c:	4b59      	ldr	r3, [pc, #356]	@ (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	4a58      	ldr	r2, [pc, #352]	@ (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f44:	4b53      	ldr	r3, [pc, #332]	@ (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4a52      	ldr	r2, [pc, #328]	@ (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f50:	4b50      	ldr	r3, [pc, #320]	@ (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	494d      	ldr	r1, [pc, #308]	@ (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d044      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	4b47      	ldr	r3, [pc, #284]	@ (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d119      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e07f      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d003      	beq.n	8001f96 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d107      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f96:	4b3f      	ldr	r3, [pc, #252]	@ (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e06f      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa6:	4b3b      	ldr	r3, [pc, #236]	@ (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e067      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb6:	4b37      	ldr	r3, [pc, #220]	@ (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f023 0203 	bic.w	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4934      	ldr	r1, [pc, #208]	@ (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc8:	f7ff f9e4 	bl	8001394 <HAL_GetTick>
 8001fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fce:	e00a      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd0:	f7ff f9e0 	bl	8001394 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e04f      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe6:	4b2b      	ldr	r3, [pc, #172]	@ (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 020c 	and.w	r2, r3, #12
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d1eb      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff8:	4b25      	ldr	r3, [pc, #148]	@ (8002090 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d20c      	bcs.n	8002020 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002006:	4b22      	ldr	r3, [pc, #136]	@ (8002090 <HAL_RCC_ClockConfig+0x1b8>)
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b20      	ldr	r3, [pc, #128]	@ (8002090 <HAL_RCC_ClockConfig+0x1b8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e032      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800202c:	4b19      	ldr	r3, [pc, #100]	@ (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4916      	ldr	r1, [pc, #88]	@ (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	4313      	orrs	r3, r2
 800203c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d009      	beq.n	800205e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800204a:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	490e      	ldr	r1, [pc, #56]	@ (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800205e:	f000 f821 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8002062:	4602      	mov	r2, r0
 8002064:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	490a      	ldr	r1, [pc, #40]	@ (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8002070:	5ccb      	ldrb	r3, [r1, r3]
 8002072:	fa22 f303 	lsr.w	r3, r2, r3
 8002076:	4a09      	ldr	r2, [pc, #36]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800207a:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff f944 	bl	800130c <HAL_InitTick>

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40023c00 	.word	0x40023c00
 8002094:	40023800 	.word	0x40023800
 8002098:	08002e60 	.word	0x08002e60
 800209c:	20000000 	.word	0x20000000
 80020a0:	20000004 	.word	0x20000004

080020a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020a8:	b090      	sub	sp, #64	@ 0x40
 80020aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020bc:	4b59      	ldr	r3, [pc, #356]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x180>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d00d      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x40>
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	f200 80a1 	bhi.w	8002210 <HAL_RCC_GetSysClockFreq+0x16c>
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x34>
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d003      	beq.n	80020de <HAL_RCC_GetSysClockFreq+0x3a>
 80020d6:	e09b      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020d8:	4b53      	ldr	r3, [pc, #332]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x184>)
 80020da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020dc:	e09b      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020de:	4b53      	ldr	r3, [pc, #332]	@ (800222c <HAL_RCC_GetSysClockFreq+0x188>)
 80020e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020e2:	e098      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020e4:	4b4f      	ldr	r3, [pc, #316]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x180>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x180>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d028      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x180>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	099b      	lsrs	r3, r3, #6
 8002100:	2200      	movs	r2, #0
 8002102:	623b      	str	r3, [r7, #32]
 8002104:	627a      	str	r2, [r7, #36]	@ 0x24
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800210c:	2100      	movs	r1, #0
 800210e:	4b47      	ldr	r3, [pc, #284]	@ (800222c <HAL_RCC_GetSysClockFreq+0x188>)
 8002110:	fb03 f201 	mul.w	r2, r3, r1
 8002114:	2300      	movs	r3, #0
 8002116:	fb00 f303 	mul.w	r3, r0, r3
 800211a:	4413      	add	r3, r2
 800211c:	4a43      	ldr	r2, [pc, #268]	@ (800222c <HAL_RCC_GetSysClockFreq+0x188>)
 800211e:	fba0 1202 	umull	r1, r2, r0, r2
 8002122:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002124:	460a      	mov	r2, r1
 8002126:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002128:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800212a:	4413      	add	r3, r2
 800212c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800212e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002130:	2200      	movs	r2, #0
 8002132:	61bb      	str	r3, [r7, #24]
 8002134:	61fa      	str	r2, [r7, #28]
 8002136:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800213a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800213e:	f7fe f843 	bl	80001c8 <__aeabi_uldivmod>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4613      	mov	r3, r2
 8002148:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800214a:	e053      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214c:	4b35      	ldr	r3, [pc, #212]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x180>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	099b      	lsrs	r3, r3, #6
 8002152:	2200      	movs	r2, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	617a      	str	r2, [r7, #20]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800215e:	f04f 0b00 	mov.w	fp, #0
 8002162:	4652      	mov	r2, sl
 8002164:	465b      	mov	r3, fp
 8002166:	f04f 0000 	mov.w	r0, #0
 800216a:	f04f 0100 	mov.w	r1, #0
 800216e:	0159      	lsls	r1, r3, #5
 8002170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002174:	0150      	lsls	r0, r2, #5
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	ebb2 080a 	subs.w	r8, r2, sl
 800217e:	eb63 090b 	sbc.w	r9, r3, fp
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800218e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002192:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002196:	ebb2 0408 	subs.w	r4, r2, r8
 800219a:	eb63 0509 	sbc.w	r5, r3, r9
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	00eb      	lsls	r3, r5, #3
 80021a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ac:	00e2      	lsls	r2, r4, #3
 80021ae:	4614      	mov	r4, r2
 80021b0:	461d      	mov	r5, r3
 80021b2:	eb14 030a 	adds.w	r3, r4, sl
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	eb45 030b 	adc.w	r3, r5, fp
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021ca:	4629      	mov	r1, r5
 80021cc:	028b      	lsls	r3, r1, #10
 80021ce:	4621      	mov	r1, r4
 80021d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021d4:	4621      	mov	r1, r4
 80021d6:	028a      	lsls	r2, r1, #10
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021de:	2200      	movs	r2, #0
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	60fa      	str	r2, [r7, #12]
 80021e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021e8:	f7fd ffee 	bl	80001c8 <__aeabi_uldivmod>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4613      	mov	r3, r2
 80021f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x180>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	0c1b      	lsrs	r3, r3, #16
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	3301      	adds	r3, #1
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002204:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800220e:	e002      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002210:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x184>)
 8002212:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002218:	4618      	mov	r0, r3
 800221a:	3740      	adds	r7, #64	@ 0x40
 800221c:	46bd      	mov	sp, r7
 800221e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	00f42400 	.word	0x00f42400
 800222c:	017d7840 	.word	0x017d7840

08002230 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e07b      	b.n	800233a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002246:	2b00      	cmp	r3, #0
 8002248:	d108      	bne.n	800225c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002252:	d009      	beq.n	8002268 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]
 800225a:	e005      	b.n	8002268 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe ff5e 	bl	8001144 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800229e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ec:	ea42 0103 	orr.w	r1, r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	0c1b      	lsrs	r3, r3, #16
 8002306:	f003 0104 	and.w	r1, r3, #4
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230e:	f003 0210 	and.w	r2, r3, #16
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	69da      	ldr	r2, [r3, #28]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002328:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b088      	sub	sp, #32
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	4613      	mov	r3, r2
 8002350:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002352:	f7ff f81f 	bl	8001394 <HAL_GetTick>
 8002356:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b01      	cmp	r3, #1
 8002366:	d001      	beq.n	800236c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002368:	2302      	movs	r3, #2
 800236a:	e12a      	b.n	80025c2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <HAL_SPI_Transmit+0x36>
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e122      	b.n	80025c2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_SPI_Transmit+0x48>
 8002386:	2302      	movs	r3, #2
 8002388:	e11b      	b.n	80025c2 <HAL_SPI_Transmit+0x280>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2203      	movs	r2, #3
 8002396:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	88fa      	ldrh	r2, [r7, #6]
 80023aa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	88fa      	ldrh	r2, [r7, #6]
 80023b0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023d8:	d10f      	bne.n	80023fa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002404:	2b40      	cmp	r3, #64	@ 0x40
 8002406:	d007      	beq.n	8002418 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002416:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002420:	d152      	bne.n	80024c8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <HAL_SPI_Transmit+0xee>
 800242a:	8b7b      	ldrh	r3, [r7, #26]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d145      	bne.n	80024bc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002434:	881a      	ldrh	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002440:	1c9a      	adds	r2, r3, #2
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800244a:	b29b      	uxth	r3, r3
 800244c:	3b01      	subs	r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002454:	e032      	b.n	80024bc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b02      	cmp	r3, #2
 8002462:	d112      	bne.n	800248a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002468:	881a      	ldrh	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002474:	1c9a      	adds	r2, r3, #2
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002488:	e018      	b.n	80024bc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800248a:	f7fe ff83 	bl	8001394 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d803      	bhi.n	80024a2 <HAL_SPI_Transmit+0x160>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a0:	d102      	bne.n	80024a8 <HAL_SPI_Transmit+0x166>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d109      	bne.n	80024bc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e082      	b.n	80025c2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1c7      	bne.n	8002456 <HAL_SPI_Transmit+0x114>
 80024c6:	e053      	b.n	8002570 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <HAL_SPI_Transmit+0x194>
 80024d0:	8b7b      	ldrh	r3, [r7, #26]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d147      	bne.n	8002566 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	330c      	adds	r3, #12
 80024e0:	7812      	ldrb	r2, [r2, #0]
 80024e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024fc:	e033      	b.n	8002566 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b02      	cmp	r3, #2
 800250a:	d113      	bne.n	8002534 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	330c      	adds	r3, #12
 8002516:	7812      	ldrb	r2, [r2, #0]
 8002518:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002528:	b29b      	uxth	r3, r3
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002532:	e018      	b.n	8002566 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002534:	f7fe ff2e 	bl	8001394 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d803      	bhi.n	800254c <HAL_SPI_Transmit+0x20a>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254a:	d102      	bne.n	8002552 <HAL_SPI_Transmit+0x210>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d109      	bne.n	8002566 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e02d      	b.n	80025c2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1c6      	bne.n	80024fe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	6839      	ldr	r1, [r7, #0]
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 fbe7 	bl	8002d48 <SPI_EndRxTxTransaction>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10a      	bne.n	80025a4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80025c0:	2300      	movs	r3, #0
  }
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3720      	adds	r7, #32
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b088      	sub	sp, #32
 80025ce:	af02      	add	r7, sp, #8
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	603b      	str	r3, [r7, #0]
 80025d6:	4613      	mov	r3, r2
 80025d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d001      	beq.n	80025ea <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80025e6:	2302      	movs	r3, #2
 80025e8:	e104      	b.n	80027f4 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_SPI_Receive+0x2c>
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e0fc      	b.n	80027f4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002602:	d112      	bne.n	800262a <HAL_SPI_Receive+0x60>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10e      	bne.n	800262a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2204      	movs	r2, #4
 8002610:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002614:	88fa      	ldrh	r2, [r7, #6]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	4613      	mov	r3, r2
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 f8eb 	bl	80027fc <HAL_SPI_TransmitReceive>
 8002626:	4603      	mov	r3, r0
 8002628:	e0e4      	b.n	80027f4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800262a:	f7fe feb3 	bl	8001394 <HAL_GetTick>
 800262e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_SPI_Receive+0x74>
 800263a:	2302      	movs	r3, #2
 800263c:	e0da      	b.n	80027f4 <HAL_SPI_Receive+0x22a>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2204      	movs	r2, #4
 800264a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	88fa      	ldrh	r2, [r7, #6]
 800265e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	88fa      	ldrh	r2, [r7, #6]
 8002664:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800268c:	d10f      	bne.n	80026ae <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800269c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80026ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b8:	2b40      	cmp	r3, #64	@ 0x40
 80026ba:	d007      	beq.n	80026cc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d170      	bne.n	80027b6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80026d4:	e035      	b.n	8002742 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d115      	bne.n	8002710 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f103 020c 	add.w	r2, r3, #12
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f0:	7812      	ldrb	r2, [r2, #0]
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002704:	b29b      	uxth	r3, r3
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800270e:	e018      	b.n	8002742 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002710:	f7fe fe40 	bl	8001394 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d803      	bhi.n	8002728 <HAL_SPI_Receive+0x15e>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002726:	d102      	bne.n	800272e <HAL_SPI_Receive+0x164>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d109      	bne.n	8002742 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e058      	b.n	80027f4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002746:	b29b      	uxth	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1c4      	bne.n	80026d6 <HAL_SPI_Receive+0x10c>
 800274c:	e038      	b.n	80027c0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b01      	cmp	r3, #1
 800275a:	d113      	bne.n	8002784 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002766:	b292      	uxth	r2, r2
 8002768:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800276e:	1c9a      	adds	r2, r3, #2
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002782:	e018      	b.n	80027b6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002784:	f7fe fe06 	bl	8001394 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d803      	bhi.n	800279c <HAL_SPI_Receive+0x1d2>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279a:	d102      	bne.n	80027a2 <HAL_SPI_Receive+0x1d8>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e01e      	b.n	80027f4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1c6      	bne.n	800274e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	6839      	ldr	r1, [r7, #0]
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 fa59 	bl	8002c7c <SPI_EndRxTransaction>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80027f2:	2300      	movs	r3, #0
  }
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	@ 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800280a:	2301      	movs	r3, #1
 800280c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800280e:	f7fe fdc1 	bl	8001394 <HAL_GetTick>
 8002812:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800281a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002822:	887b      	ldrh	r3, [r7, #2]
 8002824:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002826:	7ffb      	ldrb	r3, [r7, #31]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d00c      	beq.n	8002846 <HAL_SPI_TransmitReceive+0x4a>
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002832:	d106      	bne.n	8002842 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d102      	bne.n	8002842 <HAL_SPI_TransmitReceive+0x46>
 800283c:	7ffb      	ldrb	r3, [r7, #31]
 800283e:	2b04      	cmp	r3, #4
 8002840:	d001      	beq.n	8002846 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002842:	2302      	movs	r3, #2
 8002844:	e17f      	b.n	8002b46 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_SPI_TransmitReceive+0x5c>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <HAL_SPI_TransmitReceive+0x5c>
 8002852:	887b      	ldrh	r3, [r7, #2]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e174      	b.n	8002b46 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_SPI_TransmitReceive+0x6e>
 8002866:	2302      	movs	r3, #2
 8002868:	e16d      	b.n	8002b46 <HAL_SPI_TransmitReceive+0x34a>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b04      	cmp	r3, #4
 800287c:	d003      	beq.n	8002886 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2205      	movs	r2, #5
 8002882:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	887a      	ldrh	r2, [r7, #2]
 8002896:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	887a      	ldrh	r2, [r7, #2]
 800289c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	887a      	ldrh	r2, [r7, #2]
 80028a8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	887a      	ldrh	r2, [r7, #2]
 80028ae:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028c6:	2b40      	cmp	r3, #64	@ 0x40
 80028c8:	d007      	beq.n	80028da <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028e2:	d17e      	bne.n	80029e2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <HAL_SPI_TransmitReceive+0xf6>
 80028ec:	8afb      	ldrh	r3, [r7, #22]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d16c      	bne.n	80029cc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	881a      	ldrh	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	1c9a      	adds	r2, r3, #2
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002916:	e059      	b.n	80029cc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b02      	cmp	r3, #2
 8002924:	d11b      	bne.n	800295e <HAL_SPI_TransmitReceive+0x162>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800292a:	b29b      	uxth	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d016      	beq.n	800295e <HAL_SPI_TransmitReceive+0x162>
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	2b01      	cmp	r3, #1
 8002934:	d113      	bne.n	800295e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	881a      	ldrh	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	1c9a      	adds	r2, r3, #2
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002950:	b29b      	uxth	r3, r3
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b01      	cmp	r3, #1
 800296a:	d119      	bne.n	80029a0 <HAL_SPI_TransmitReceive+0x1a4>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d014      	beq.n	80029a0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002980:	b292      	uxth	r2, r2
 8002982:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002988:	1c9a      	adds	r2, r3, #2
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002992:	b29b      	uxth	r3, r3
 8002994:	3b01      	subs	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800299c:	2301      	movs	r3, #1
 800299e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029a0:	f7fe fcf8 	bl	8001394 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d80d      	bhi.n	80029cc <HAL_SPI_TransmitReceive+0x1d0>
 80029b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b6:	d009      	beq.n	80029cc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e0bc      	b.n	8002b46 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1a0      	bne.n	8002918 <HAL_SPI_TransmitReceive+0x11c>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d19b      	bne.n	8002918 <HAL_SPI_TransmitReceive+0x11c>
 80029e0:	e082      	b.n	8002ae8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <HAL_SPI_TransmitReceive+0x1f4>
 80029ea:	8afb      	ldrh	r3, [r7, #22]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d171      	bne.n	8002ad4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	330c      	adds	r3, #12
 80029fa:	7812      	ldrb	r2, [r2, #0]
 80029fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a16:	e05d      	b.n	8002ad4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d11c      	bne.n	8002a60 <HAL_SPI_TransmitReceive+0x264>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d017      	beq.n	8002a60 <HAL_SPI_TransmitReceive+0x264>
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d114      	bne.n	8002a60 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	330c      	adds	r3, #12
 8002a40:	7812      	ldrb	r2, [r2, #0]
 8002a42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d119      	bne.n	8002aa2 <HAL_SPI_TransmitReceive+0x2a6>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d014      	beq.n	8002aa2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002aa2:	f7fe fc77 	bl	8001394 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d803      	bhi.n	8002aba <HAL_SPI_TransmitReceive+0x2be>
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab8:	d102      	bne.n	8002ac0 <HAL_SPI_TransmitReceive+0x2c4>
 8002aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d109      	bne.n	8002ad4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e038      	b.n	8002b46 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d19c      	bne.n	8002a18 <HAL_SPI_TransmitReceive+0x21c>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d197      	bne.n	8002a18 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ae8:	6a3a      	ldr	r2, [r7, #32]
 8002aea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f92b 	bl	8002d48 <SPI_EndRxTxTransaction>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e01d      	b.n	8002b46 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10a      	bne.n	8002b28 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002b44:	2300      	movs	r3, #0
  }
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3728      	adds	r7, #40	@ 0x28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b5c:	b2db      	uxtb	r3, r3
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b7c:	f7fe fc0a 	bl	8001394 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	4413      	add	r3, r2
 8002b8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b8c:	f7fe fc02 	bl	8001394 <HAL_GetTick>
 8002b90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b92:	4b39      	ldr	r3, [pc, #228]	@ (8002c78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	015b      	lsls	r3, r3, #5
 8002b98:	0d1b      	lsrs	r3, r3, #20
 8002b9a:	69fa      	ldr	r2, [r7, #28]
 8002b9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ba0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ba2:	e055      	b.n	8002c50 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002baa:	d051      	beq.n	8002c50 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bac:	f7fe fbf2 	bl	8001394 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d902      	bls.n	8002bc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d13d      	bne.n	8002c3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002bd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bda:	d111      	bne.n	8002c00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002be4:	d004      	beq.n	8002bf0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bee:	d107      	bne.n	8002c00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c08:	d10f      	bne.n	8002c2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e018      	b.n	8002c70 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d102      	bne.n	8002c4a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61fb      	str	r3, [r7, #28]
 8002c48:	e002      	b.n	8002c50 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	bf0c      	ite	eq
 8002c60:	2301      	moveq	r3, #1
 8002c62:	2300      	movne	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d19a      	bne.n	8002ba4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3720      	adds	r7, #32
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20000000 	.word	0x20000000

08002c7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af02      	add	r7, sp, #8
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c90:	d111      	bne.n	8002cb6 <SPI_EndRxTransaction+0x3a>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c9a:	d004      	beq.n	8002ca6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ca4:	d107      	bne.n	8002cb6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cb4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cbe:	d12a      	bne.n	8002d16 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cc8:	d012      	beq.n	8002cf0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2180      	movs	r1, #128	@ 0x80
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff ff49 	bl	8002b6c <SPI_WaitFlagStateUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d02d      	beq.n	8002d3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce4:	f043 0220 	orr.w	r2, r3, #32
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e026      	b.n	8002d3e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f7ff ff36 	bl	8002b6c <SPI_WaitFlagStateUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d01a      	beq.n	8002d3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0a:	f043 0220 	orr.w	r2, r3, #32
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e013      	b.n	8002d3e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2101      	movs	r1, #1
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f7ff ff23 	bl	8002b6c <SPI_WaitFlagStateUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d007      	beq.n	8002d3c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d30:	f043 0220 	orr.w	r2, r3, #32
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e000      	b.n	8002d3e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f7ff ff04 	bl	8002b6c <SPI_WaitFlagStateUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6e:	f043 0220 	orr.w	r2, r3, #32
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e032      	b.n	8002de0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002de8 <SPI_EndRxTxTransaction+0xa0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8002dec <SPI_EndRxTxTransaction+0xa4>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	0d5b      	lsrs	r3, r3, #21
 8002d86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d8a:	fb02 f303 	mul.w	r3, r2, r3
 8002d8e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d98:	d112      	bne.n	8002dc0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2200      	movs	r2, #0
 8002da2:	2180      	movs	r1, #128	@ 0x80
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f7ff fee1 	bl	8002b6c <SPI_WaitFlagStateUntilTimeout>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d016      	beq.n	8002dde <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db4:	f043 0220 	orr.w	r2, r3, #32
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e00f      	b.n	8002de0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd6:	2b80      	cmp	r3, #128	@ 0x80
 8002dd8:	d0f2      	beq.n	8002dc0 <SPI_EndRxTxTransaction+0x78>
 8002dda:	e000      	b.n	8002dde <SPI_EndRxTxTransaction+0x96>
        break;
 8002ddc:	bf00      	nop
  }

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000000 	.word	0x20000000
 8002dec:	165e9f81 	.word	0x165e9f81

08002df0 <memset>:
 8002df0:	4402      	add	r2, r0
 8002df2:	4603      	mov	r3, r0
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d100      	bne.n	8002dfa <memset+0xa>
 8002df8:	4770      	bx	lr
 8002dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8002dfe:	e7f9      	b.n	8002df4 <memset+0x4>

08002e00 <__libc_init_array>:
 8002e00:	b570      	push	{r4, r5, r6, lr}
 8002e02:	4d0d      	ldr	r5, [pc, #52]	@ (8002e38 <__libc_init_array+0x38>)
 8002e04:	4c0d      	ldr	r4, [pc, #52]	@ (8002e3c <__libc_init_array+0x3c>)
 8002e06:	1b64      	subs	r4, r4, r5
 8002e08:	10a4      	asrs	r4, r4, #2
 8002e0a:	2600      	movs	r6, #0
 8002e0c:	42a6      	cmp	r6, r4
 8002e0e:	d109      	bne.n	8002e24 <__libc_init_array+0x24>
 8002e10:	4d0b      	ldr	r5, [pc, #44]	@ (8002e40 <__libc_init_array+0x40>)
 8002e12:	4c0c      	ldr	r4, [pc, #48]	@ (8002e44 <__libc_init_array+0x44>)
 8002e14:	f000 f818 	bl	8002e48 <_init>
 8002e18:	1b64      	subs	r4, r4, r5
 8002e1a:	10a4      	asrs	r4, r4, #2
 8002e1c:	2600      	movs	r6, #0
 8002e1e:	42a6      	cmp	r6, r4
 8002e20:	d105      	bne.n	8002e2e <__libc_init_array+0x2e>
 8002e22:	bd70      	pop	{r4, r5, r6, pc}
 8002e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e28:	4798      	blx	r3
 8002e2a:	3601      	adds	r6, #1
 8002e2c:	e7ee      	b.n	8002e0c <__libc_init_array+0xc>
 8002e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e32:	4798      	blx	r3
 8002e34:	3601      	adds	r6, #1
 8002e36:	e7f2      	b.n	8002e1e <__libc_init_array+0x1e>
 8002e38:	08002e78 	.word	0x08002e78
 8002e3c:	08002e78 	.word	0x08002e78
 8002e40:	08002e78 	.word	0x08002e78
 8002e44:	08002e7c 	.word	0x08002e7c

08002e48 <_init>:
 8002e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4a:	bf00      	nop
 8002e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e4e:	bc08      	pop	{r3}
 8002e50:	469e      	mov	lr, r3
 8002e52:	4770      	bx	lr

08002e54 <_fini>:
 8002e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e56:	bf00      	nop
 8002e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5a:	bc08      	pop	{r3}
 8002e5c:	469e      	mov	lr, r3
 8002e5e:	4770      	bx	lr
